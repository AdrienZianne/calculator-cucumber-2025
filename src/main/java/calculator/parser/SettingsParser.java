package calculator.parser;

import java.math.RoundingMode;

import calculator.Configuration;
import calculator.Configuration.Mode;
import calculator.parser.antlr.*;

import io.cli.Shell;

/**
 * A class that maps the generated parser to the calculator custom classes.
 * This class was not generated by ANTLR, and needs to be manually modified when
 * the grammar changes.
 */
public class SettingsParser extends LabeledSettingsBaseVisitor<Void> {

    private Shell shell;

    public SettingsParser(Shell shell) {
        this.shell = shell;
    }

    /*
     * __________________________________________________________________Classic_parameter
     */

    @Override
    public Void visitSettingsQuit(LabeledSettingsParser.SettingsQuitContext ctx) {
        shell.exit();
        return null;
    }

    @Override
    public Void visitSettingsHelp(LabeledSettingsParser.SettingsHelpContext ctx) {
        shell.displayHelp();
        return null;
    }

    @Override
    public Void visitSettingsListOptions(LabeledSettingsParser.SettingsListOptionsContext ctx) {
        shell.displayOptions();
        return null;
    }

    @Override
    public Void visitSettingsClear(LabeledSettingsParser.SettingsClearContext ctx) {
        shell.clear();
        return null;
    }

    @Override
    public Void visitSettingsResetSeed(LabeledSettingsParser.SettingsResetSeedContext ctx) {
        Configuration.resetSeed();
        return null;
    }

    /*
     * __________________________________________________________________Info
     */

    @Override
    public Void visitInfoMode(LabeledSettingsParser.InfoModeContext ctx) {
        shell.infoOption(Shell.Options.MODE);
        return null;
    }

    @Override
    public Void visitInfoRealPrecision(LabeledSettingsParser.InfoRealPrecisionContext ctx) {
        shell.infoOption(Shell.Options.REAL_PRECISION);
        return null;
    }

    @Override
    public Void visitInfoRoundingMode(LabeledSettingsParser.InfoRoundingModeContext ctx) {
        shell.infoOption(Shell.Options.REAL_ROUNDING_MODE);
        return null;
    }

    @Override
    public Void visitInfoUseRealNotation(LabeledSettingsParser.InfoUseRealNotationContext ctx) {
        shell.infoOption(Shell.Options.USE_REAL_NOTATION);
        return null;
    }

    @Override
    public Void visitInfoUseScientificNotation(LabeledSettingsParser.InfoUseScientificNotationContext ctx) {
        shell.infoOption(Shell.Options.USE_SCIENTIFIC_NOTATION);
        return null;
    }

    @Override
    public Void visitInfoScNotationMaxLeft(LabeledSettingsParser.InfoScNotationMaxLeftContext ctx) {
        shell.infoOption(Shell.Options.SC_NOTATION_MAX_LEFT);
        return null;
    }

    @Override
    public Void visitInfoScNotationMaxRight(LabeledSettingsParser.InfoScNotationMaxRightContext ctx) {
        shell.infoOption(Shell.Options.SC_NOTATION_MAX_RIGHT);
        return null;
    }

    @Override
    public Void visitInfoUseDegrees(LabeledSettingsParser.InfoUseDegreesContext ctx) {
        shell.infoOption(Shell.Options.USE_DEGREES);
        return null;
    }

    @Override
    public Void visitInfoSeed(LabeledSettingsParser.InfoSeedContext ctx) {
        shell.infoOption(Shell.Options.SEED);
        return null;
    }

    @Override
    public Void visitInfoBaseNotationConvention(LabeledSettingsParser.InfoBaseNotationConventionContext ctx) {
        shell.infoOption(Shell.Options.BASE_NOTATION_CONVENTION);
        return null;
    }

    @Override
    public Void visitInfoLogicalSymbol(LabeledSettingsParser.InfoLogicalSymbolContext ctx) {
        shell.infoOption(Shell.Options.LOGICAL_SYMBOL);
        return null;
    }

    /*
     * __________________________________________________________________Change_Option
     */

    @Override
    public Void visitOptionRealPrecision(LabeledSettingsParser.OptionRealPrecisionContext ctx) {
        Configuration.setRealPrecision(Integer.parseInt(ctx.getChild(2).getText()));
        return null;
    }

    @Override
    public Void visitOptionRoundingMode(LabeledSettingsParser.OptionRoundingModeContext ctx) {
        Configuration.setRealRoundingMode(RoundingMode.valueOf(ctx.getChild(2).getText().toUpperCase()));
        return null;
    }

    @Override
    public Void visitOptionUseRealNotation(LabeledSettingsParser.OptionUseRealNotationContext ctx) {
        Configuration.setUseRealNotation(Boolean.valueOf(ctx.getChild(2).getText()));
        return null;
    }

    @Override
    public Void visitOptionUseScientificNotation(LabeledSettingsParser.OptionUseScientificNotationContext ctx) {
        Configuration.setUseScientificNotation(Boolean.valueOf(ctx.getChild(2).getText()));
        return null;
    }

    @Override
    public Void visitOptionScNotationMaxLeft(LabeledSettingsParser.OptionScNotationMaxLeftContext ctx) {
        Configuration.setScNotationMaxLeft(Integer.parseInt(ctx.getChild(2).getText()));
        return null;
    }

    @Override
    public Void visitOptionScNotationMaxRight(LabeledSettingsParser.OptionScNotationMaxRightContext ctx) {
        Configuration.setScNotationMaxRight(Integer.parseInt(ctx.getChild(2).getText()));
        return null;
    }

    @Override
    public Void visitOptionUseDegrees(LabeledSettingsParser.OptionUseDegreesContext ctx) {
        Configuration.setUseDegrees(Boolean.valueOf(ctx.getChild(2).getText()));
        return null;
    }

    @Override
    public Void visitOptionSeed(LabeledSettingsParser.OptionSeedContext ctx) {
        Configuration.setSeed(Integer.parseInt(ctx.getChild(2).getText()));
        return null;
    }

    @Override
    public Void visitOptionBaseNotationConvention(LabeledSettingsParser.OptionBaseNotationConventionContext ctx) {
        Configuration.setBaseNotationConvention(Boolean.valueOf(ctx.getChild(2).getText()));
        return null;
    }

    @Override
    public Void visitOptionLogicalSymbol(LabeledSettingsParser.OptionLogicalSymbolContext ctx) {
        Configuration.setLogicalSymbol(Boolean.valueOf(ctx.getChild(2).getText()));
        return null;
    }

    @Override
    public Void visitModeArithmetic(LabeledSettingsParser.ModeArithmeticContext ctx) {
        Configuration.setMode(Mode.ARITHMETIC);
        return null;
    }

    @Override
    public Void visitModeProgrammer(LabeledSettingsParser.ModeProgrammerContext ctx) {
        Configuration.setMode(Mode.PROGRAMMER);
        return null;
    }

    /*
     * __________________________________________________________________Rouding_Mode
     */

    @Override
    public Void visitRoundingModeCeiling(LabeledSettingsParser.RoundingModeCeilingContext ctx) {
        Configuration.setRealRoundingMode(RoundingMode.CEILING);
        return null;
    }

    @Override
    public Void visitRoundingModeDown(LabeledSettingsParser.RoundingModeDownContext ctx) {
        Configuration.setRealRoundingMode(RoundingMode.DOWN);
        return null;
    }

    @Override
    public Void visitRoundingModeFloor(LabeledSettingsParser.RoundingModeFloorContext ctx) {
        Configuration.setRealRoundingMode(RoundingMode.FLOOR);
        return null;
    }

    @Override
    public Void visitRoundingModeHalfDown(LabeledSettingsParser.RoundingModeHalfDownContext ctx) {
        Configuration.setRealRoundingMode(RoundingMode.HALF_DOWN);
        return null;
    }

    @Override
    public Void visitRoundingModeHalfEven(LabeledSettingsParser.RoundingModeHalfEvenContext ctx) {
        Configuration.setRealRoundingMode(RoundingMode.HALF_EVEN);
        return null;
    }

    @Override
    public Void visitRoundingModeHalfUp(LabeledSettingsParser.RoundingModeHalfUpContext ctx) {
        Configuration.setRealRoundingMode(RoundingMode.HALF_UP);
        return null;
    }

    @Override
    public Void visitRoundingModeUnnecessary(LabeledSettingsParser.RoundingModeUnnecessaryContext ctx) {
        Configuration.setRealRoundingMode(RoundingMode.UNNECESSARY);
        return null;
    }

    @Override
    public Void visitRoundingModeUp(LabeledSettingsParser.RoundingModeUpContext ctx) {
        Configuration.setRealRoundingMode(RoundingMode.UP);
        return null;
    }
}
